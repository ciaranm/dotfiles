-- vim: set sw=4 sts=4 et ft=lua : --
--
-- This is the rc.lua that ships with awesome, hacked in various
-- horrible ways.
--

-- Include awesome libraries, with lots of useful function!
require("awful")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")

-- {{{ Variable definitions
theme_path = ".config/awesome/theme.lua"
beautiful.init(theme_path)

-- This is used later as the default terminal and editor to run.
terminal = "xterm"
editor_cmd = "gvim -f"

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.max,
    awful.layout.suit.magnifier,
    awful.layout.suit.tile.top
}

-- Table of clients that should be set floating. The index may be either
-- the application class or instance. The instance is useful when running
-- a console app in a terminal like (Music on Console)
--    xterm -name mocp -e mocp
floatapps =
{
    ["MPlayer"] = true,
    ["pinentry"] = true,
    ["pinentry-gtk-2"] = true,
    ["gimp"] = true,
    ["GIMP"] = true,
    ["feh"] = true,
    ["glxgears"] = true
}

-- Applications to be moved to a pre-defined tag by class or instance.
-- Use the screen and tags indices.
apptags =
{
    ["claws-mail"] = { screen = 1, tag = 2 },
    ["Firefox"] = { screen = 1, tag = 3 }
}

-- Define if we want to use titlebar on all applications.
use_titlebar = false
-- }}}

-- {{{ Tags
-- Define tags table.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = {}
    -- Create 9 tags per screen.
    tagnames = { "1", "2=email", "3=web", "4=irc", "5=paludis", "6=media", "7", "8", "9" }
    -- Create 9 tags per screen.
    for tagnumber = 1, 9 do
        tags[s][tagnumber] = tag(tagnumber)
        -- Add tags to screen one by one
        tags[s][tagnumber].screen = s
        tags[s][tagnumber].name = tagnames[tagnumber]
        awful.layout.set(layouts[1], tags[s][tagnumber])
    end
    -- I'm sure you want to see at least one tag.
    tags[s][1].selected = true
end
-- }}}

-- {{{ Wibox
-- Create a textbox widget
mytextbox = widget({ type = "textbox", align = "right" })
-- Set the default text in textbox
mytextbox.text = "..."

myactivebox = widget({ type = "textbox", align = "right" })
myactivebox.text = ""

-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu.new({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                        { "open terminal", terminal }
                                      }
                            })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })

-- Create a systray
mysystray = widget({ type = "systray", align = "right" })

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = { button({ }, 1, awful.tag.viewonly),
                      button({ modkey }, 1, awful.client.movetotag),
                      button({ }, 3, function (tag) tag.selected = not tag.selected end),
                      button({ modkey }, 3, awful.client.toggletag),
                      button({ }, 4, awful.tag.viewnext),
                      button({ }, 5, awful.tag.viewprev) }
mytasklist = {}
mytasklist.buttons = { button({ }, 1, function (c) client.focus = c; c:raise() end),
                       button({ }, 3, function () if instance then instance:hide() end instance = awful.menu.clients({ width=250 }) end),
                       button({ }, 4, function () awful.client.focus.byidx(1) end),
                       button({ }, 5, function () awful.client.focus.byidx(-1) end) }

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = widget({ type = "textbox", align = "left" })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = widget({ type = "imagebox", align = "right" })
    mylayoutbox[s]:buttons({ button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                             button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                             button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                             button({ }, 5, function () awful.layout.inc(layouts, -1) end) })
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist.new(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist.new(function(c)
                                                  return awful.widget.tasklist.label.currenttags(c, s)
                                              end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = wibox({ position = "top", fg = beautiful.fg_normal, bg = beautiful.bg_normal })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = { mylauncher,
                           mypromptbox[s],
                           mytaglist[s],
                           mytasklist[s],
                           myactivebox,
                           mytextbox,
                           s == 1 and mysystray or nil,
                           mylayoutbox[s] }
    mywibox[s].screen = s
end
-- }}}

-- {{{ Mouse bindings
root.buttons({
    button({ }, 3, function () mymainmenu:toggle() end),
    button({ }, 4, awful.tag.viewnext),
    button({ }, 5, awful.tag.viewprev)
})
-- }}}

-- {{{ Key bindings
-- Bind keyboard digits
-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

globalkeys = {}
clientkeys = {}

for i = 1, keynumber do
    table.insert(globalkeys,
        key({ modkey }, i,
            function ()
                local screen = mouse.screen
                if tags[screen][i] then
                    awful.tag.viewonly(tags[screen][i])
                end
            end))
    table.insert(globalkeys,
        key({ modkey, "Control" }, i,
            function ()
                local screen = mouse.screen
                if tags[screen][i] then
                    tags[screen][i].selected = not tags[screen][i].selected
                end
            end))
    table.insert(globalkeys,
        key({ modkey, "Shift" }, i,
            function ()
                if client.focus and tags[client.focus.screen][i] then
                    awful.client.movetotag(tags[client.focus.screen][i])
                end
            end))
    table.insert(globalkeys,
        key({ modkey, "Control", "Shift" }, i,
            function ()
                if client.focus and tags[client.focus.screen][i] then
                    awful.client.toggletag(tags[client.focus.screen][i])
                end
            end))
end

table.insert(globalkeys, key({ modkey }, "Left", awful.tag.viewprev))
table.insert(globalkeys, key({ modkey }, "Right", awful.tag.viewnext))
table.insert(globalkeys, key({ modkey }, "Escape", awful.tag.history.restore))

table.insert(globalkeys, key({ modkey }, "j", function () awful.client.focus.byidx(1); if client.focus then client.focus:raise() end end))
table.insert(globalkeys, key({ modkey }, "k", function () awful.client.focus.byidx(-1);  if client.focus then client.focus:raise() end end))
table.insert(globalkeys, key({ modkey, "Shift" }, "j", function () awful.client.swap.byidx(1) end))
table.insert(globalkeys, key({ modkey, "Shift" }, "k", function () awful.client.swap.byidx(-1) end))

table.insert(globalkeys, key({ modkey, "Control" }, "j", function () awful.screen.focus(1) end))
table.insert(globalkeys, key({ modkey, "Control" }, "k", function () awful.screen.focus(-1) end))

table.insert(globalkeys, key({ modkey }, "Tab", function () awful.client.focus.history.previous(); if client.focus then client.focus:raise() end end))

table.insert(globalkeys, key({ modkey }, "u", awful.client.urgent.jumpto))

-- Standard program
table.insert(globalkeys, key({ modkey }, "Return", function () awful.util.spawn(terminal) end))

table.insert(globalkeys, key({ modkey, "Control" }, "r", function ()
                                                             mypromptbox[mouse.screen].text =
                                                                 awful.util.escape(awful.util.restart())
                                                          end))
table.insert(globalkeys, key({ modkey, "Shift" }, "q", awesome.quit))

-- Client manipulation
table.insert(clientkeys, key({ modkey }, "m", function (c) c.maximized_horizontal = not c.maximized_horizontal
                                                           c.maximized_vertical = not c.maximized_vertical end))
table.insert(clientkeys, key({ modkey }, "f", function (c) c.fullscreen = not c.fullscreen end))
table.insert(clientkeys, key({ modkey, "Shift" }, "c", function (c) c:kill() end))
table.insert(clientkeys, key({ modkey, "Control" }, "space", awful.client.floating.toggle))
table.insert(clientkeys, key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end))
table.insert(clientkeys, key({ modkey }, "o", awful.client.movetoscreen))
table.insert(clientkeys, key({ modkey, "Shift" }, "r", function (c) c:redraw() end))

-- Layout manipulation
table.insert(globalkeys, key({ modkey }, "l", function () awful.tag.incmwfact(0.05) end))
table.insert(globalkeys, key({ modkey }, "h", function () awful.tag.incmwfact(-0.05) end))
table.insert(globalkeys, key({ modkey, "Shift" }, "h", function () awful.tag.incnmaster(1) end))
table.insert(globalkeys, key({ modkey, "Shift" }, "l", function () awful.tag.incnmaster(-1) end))
table.insert(globalkeys, key({ modkey, "Control" }, "h", function () awful.tag.incncol(1) end))
table.insert(globalkeys, key({ modkey, "Control" }, "l", function () awful.tag.incncol(-1) end))
table.insert(globalkeys, key({ modkey }, "space", function () awful.layout.inc(layouts, 1) end))
table.insert(globalkeys, key({ modkey, "Shift" }, "space", function () awful.layout.inc(layouts, -1) end))

-- Prompt
table.insert(globalkeys, key({ modkey }, "F1", function ()
                                                    awful.prompt.run({ prompt = "Run: " },
                                                                     mypromptbox[mouse.screen],
                                                                     awful.util.spawn, awful.completion.bash,
                                                                     awful.util.getdir("cache") .. "/history")
                                               end))

-- More programs
table.insert(globalkeys, key({ modkey }, "F2", function () awful.util.spawn("claws-mail") end))
table.insert(globalkeys, key({ modkey }, "F3", function () awful.util.spawn("firefox") end))
table.insert(globalkeys, key({ modkey }, "F4", function () awful.util.spawn("xterm") end))
table.insert(globalkeys, key({ modkey }, "F5", function () awful.util.spawn("gvim") end))
table.insert(globalkeys, key({ modkey }, "F12", function () awful.util.spawn("alock -auth pam -bg blank:color=yellow") end))
table.insert(globalkeys, key({ modkey }, "p", function () awful.util.spawn("mpc toggle") end))
table.insert(globalkeys, key({ modkey }, "w", function () awful.util.spawn("sh -c 'find $HOME/wallpaper/current/ -type f | shuf -n1 | xargs feh --bg-scale'") end))

-- Rename
table.insert(globalkeys, key({ modkey }, "r", function ()
    awful.prompt.run({ prompt = "Rename: " },
    mypromptbox[mouse.screen],
    function (str)
        if #str > 0 then
            for s = 1, screen.count() do
                awful.tag.selected(s).name = string.match(awful.tag.selected(s).name, '.') .. "=" .. str
            end
        end
    end,
    nil,
    awful.util.getdir("cache") .. "/history_rename")
end))

--
-- Client awful tagging: this is useful to tag some clients and then do stuff like move to tag on them
table.insert(clientkeys, key({ modkey }, "t", awful.client.togglemarked))

for i = 1, keynumber do
    table.insert(globalkeys, key({ modkey, "Shift" }, "F" .. i,
                 function ()
                     local screen = mouse.screen
                     if tags[screen][i] then
                         for k, c in pairs(awful.client.getmarked()) do
                             awful.client.movetotag(tags[screen][i], c)
                         end
                     end
                 end))
end

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Hooks
-- Hook function to execute when focusing a client.
awful.hooks.focus.register(function (c)
    if not awful.client.ismarked(c) then
        c.border_color = beautiful.border_focus
    end
end)

-- Hook function to execute when unfocusing a client.
awful.hooks.unfocus.register(function (c)
    if not awful.client.ismarked(c) then
        c.border_color = beautiful.border_normal
    end
end)

-- Hook function to execute when marking a client
awful.hooks.marked.register(function (c)
    c.border_color = beautiful.border_marked
end)

-- Hook function to execute when unmarking a client.
awful.hooks.unmarked.register(function (c)
    c.border_color = beautiful.border_focus
end)

-- Hook function to execute when a new client appears.
awful.hooks.manage.register(function (c, startup)
    -- If we are not managing this application at startup,
    -- move it to the screen where the mouse is.
    -- We only do it for filtered windows (i.e. no dock, etc).
    if not startup and awful.client.focus.filter(c) then
        c.screen = mouse.screen
    end

    if use_titlebar then
        -- Add a titlebar
        awful.titlebar.add(c, { modkey = modkey })
    end
    -- Add mouse bindings
    c:buttons({
        button({ }, 1, function (c) client.focus = c; c:raise() end),
        button({ modkey }, 1, awful.mouse.client.move),
        button({ modkey }, 3, awful.mouse.client.resize)
    })
    -- New client may not receive focus
    -- if they're not focusable, so set border anyway.
    c.border_width = beautiful.border_width
    c.border_color = beautiful.border_normal

    -- Check if the application should be floating.
    local cls = c.class
    local inst = c.instance
    if floatapps[cls] then
        awful.client.floating.set(c, floatapps[cls])
    elseif floatapps[inst] then
        awful.client.floating.set(c, floatapps[inst])
    end

    -- Check application->screen/tag mappings.
    local target
    if apptags[cls] then
        target = apptags[cls]
    elseif apptags[inst] then
        target = apptags[inst]
    end
    if target then
        c.screen = target.screen
        awful.client.movetotag(tags[target.screen][target.tag], c)
    end

    -- Do this after tag mapping, so you don't see it on the wrong tag for a split second.
    client.focus = c

    -- Set key bindings
    c:keys(clientkeys)

    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- awful.client.setslave(c)

    -- Honor size hints: if you want to drop the gaps between windows, set this to false.
    -- c.size_hints_honor = false
end)

-- Hook function to execute when arranging the screen.
-- (tag switch, new client, etc)
awful.hooks.arrange.register(function (screen)
    local layout = awful.layout.getname(awful.layout.get(screen))
    if layout and beautiful["layout_" ..layout] then
        mylayoutbox[screen].image = image(beautiful["layout_" .. layout])
    else
        mylayoutbox[screen].image = nil
    end

    -- Give focus to the latest client in history if no window has focus
    -- or if the current window is a desktop or a dock one.
    if not client.focus then
        local c = awful.client.focus.history.get(screen, 0)
        if c then client.focus = c end
    end
end)

-- Hook called every second
battery_bg="#333333"
battery_text=""
active_bg="#ffffcc"
active_text=""
awful.hooks.timer.register(1, function ()
    local f = io.open('/sys/class/power_supply/BAT1/status')
    if f then
        local l = f:lines()
        for line in l do
            if line == 'Charging' then
                local e_now = 0
                local e_full = 1
                local g = io.open('/sys/class/power_supply/BAT1/energy_now')
                local h = io.open('/sys/class/power_supply/BAT1/energy_full')
                for iline in g:lines() do
                    e_now = iline
                end
                for iline in h:lines() do
                    e_full = iline
                end
                g:close()
                h:close()

                local e_perc = ((e_now + 0) * 100) / (e_full + 0)
                if e_perc >= 90 then
                    battery_bg = "#e9fc9f"
                elseif e_perc >= 70 then
                    battery_bg = "#c9fc7f"
                elseif e_perc >= 50 then
                    battery_bg = "#a9fc5f"
                elseif e_perc >= 30 then
                    battery_bg = "#79fc3f"
                elseif e_perc >= 10 then
                    battery_bg = "#59fc0f"
                else
                    battery_bg = "#29fc4f"
                end
                battery_text = "" .. math.floor(e_perc) .. "%"
            elseif line == 'Discharging' then
                local e_now = 0
                local e_full = 1
                local g = io.open('/sys/class/power_supply/BAT1/energy_now')
                local h = io.open('/sys/class/power_supply/BAT1/energy_full')
                for iline in g:lines() do
                    e_now = iline
                end
                for iline in h:lines() do
                    e_full = iline
                end
                g:close()
                h:close()

                local e_perc = ((e_now + 0) * 100) / (e_full + 0)
                if e_perc >= 90 then
                    battery_bg = "#fce99f"
                elseif e_perc >= 70 then
                    battery_bg = "#fcc97f"
                elseif e_perc >= 50 then
                    battery_bg = "#fca95f"
                elseif e_perc >= 30 then
                    battery_bg = "#fc793f"
                elseif e_perc >= 10 then
                    battery_bg = "#fc590f"
                else
                    battery_bg = "#fc294f"
                end
                battery_text = "" .. math.floor(e_perc) .. "%"
            else
                battery_bg="#999999"
                battery_text=""
            end
        end
        f:close()
    else
        battery_bg="#ff0000"
        battery_text="No Battery"
    end

    if os.time() % 3 == 0 then
        active_text = ""
        active_bg = "#ffffcc"
        local m = io.open('/home/users/ciaranm/.config/awesome/active')
        if m then
            local ml = m:lines()
            for line in ml do
                if line == '' then
                    --
                else
                    if active_text == '' then
                        --
                    else
                        active_text = active_text .. " "
                    end
                    active_text = active_text .. string.gsub(line, "^%d+ ", "")

                    active_pid = string.gsub(line, " .*", "")
                    local mm = io.open('/proc/' .. active_pid .. "/status")
                    if mm then
                        mm:close()
                    else
                        active_bg = "#cc6666"
                        active_text = active_text .. "!"
                    end
                end
            end
            m:close()
        end
    end
    mytextbox.text = " " .. os.date() .. " " .. battery_text .. " "
    mytextbox.bg = battery_bg

    if string.len(active_text) == 0 then
        myactivebox.text = ""
    else
        myactivebox.text = " " .. active_text .. " "
        myactivebox.bg = active_bg
    end
end)
-- }}}
